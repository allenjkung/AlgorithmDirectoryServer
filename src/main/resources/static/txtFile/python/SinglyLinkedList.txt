class SinglyNode:
    def __init__(self, value):
        self.value = value
        self.next = None
    
    def setValue(self, nValue):
        self.value = nValue

    def setNext(self, node):
        self.next = node
    
    def getValue(self):
        return self.value

    def getNext(self):
        return self.next

class SinglyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def setPrevAndCurrNode(self, prevNode, currNode, position):
        for i in range(position):
            prevNode = currNode
            currNode = prevNode.getNext()
        return [prevNode, currNode]

    def push(self, value, position = 0):
        if position > self.size or position < 0:
            return
        
        newNode = SinglyNode(value)
        if position == 0:
            newNode.setNext(self.head)
            self.head = newNode
        if position == self.size:
            if self.size != 0:
                self.tail.setNext(newNode)
            self.tail = newNode
        if position > 0 and position < self.size:
            prevAndCurrNodes = self.setPrevAndCurrNode(self.head, self.head, position)
            prevNode = prevAndCurrNodes[0]
            currNode = prevAndCurrNodes[1]
            prevNode.setNext(newNode)
            newNode.setNext(currNode)
        self.size += 1
    
    def pop(self, position = 0):
        if position >= self.size or position < 0:
            return

        removedNode = self.head
        if position == 0:
            self.head = removedNode.getNext()
        elif position > 0:
            prevAndCurrNodes = self.setPrevAndCurrNode(self.head, self.head, position)
            prevNode = prevAndCurrNodes[0]
            currNode = prevAndCurrNodes[1]
            removedNode = currNode
            prevNode.setNext(removedNode.getNext())
            if position == (self.size - 1):
                self.tail = prevNode
        
        self.size -= 1
        if self.size == 0:
            self.head = None
            self.tail = None
        return removedNode.getValue()
    
    def setNodeValue(self, position, value):
        if position == 0:
            self.head.setValue(value)
        elif position == (self.size - 1):
            self.tail.setValue(value)
        elif position > 0 and position < (self.size - 1):
            currNode = self.head
            for i in range(position):
                currNode = currNode.getNext()
            currNode.setValue(value)

    def getNodeValue(self, position):
        if position == 0:
            return self.head.getValue()
        elif position == (self.size - 1):
            return self.tail.getValue()
        elif position > 0 and position < (self.size - 1):
            currNode = self.head
            for i in range(position):
                currNode = currNode.getNext()
            return currNode.getValue()
        return None

    def searchNodeValue(self, value):
        listSize = self.size
        currNode = self.head
        for i in range(listSize):
            if currNode.getValue() == value:
                return i
            currNode = currNode.getNext()
        return -1

    def getSize(self):
        return self.size
    
    def __str__(self):
        if self.size == 0:
            return "Linked List: Empty"
        listSize = self.size
        linkListStr = "Linked List:"
        currNode = self.head
        for i in range(listSize):
            linkListStr += (" " + str(currNode.getValue()))
            currNode = currNode.getNext()
        return linkListStr