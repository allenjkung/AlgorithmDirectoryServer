function RecursiveMergeArr(&$arr, &$tempArr, $leftIndex, $middleIndex, $rightIndex) {
    $i = $leftIndex;
    $j = $middleIndex;
    $k = $leftIndex;
    while($i < $middleIndex && $j < $rightIndex) {
        if($tempArr[$i] < $tempArr[$j]) {
            $arr[$k] = $tempArr[$i];
            $i += 1;
        }
        else {
            $arr[$k] = $tempArr[$j];
            $j += 1;
        }
        $k += 1;
    }
    while($i < $middleIndex) {
        $arr[$k] = $tempArr[$i];
        $i += 1;
        $k += 1;
    }
    while($j < $rightIndex) {
        $arr[$k] = $tempArr[$j];
        $j += 1;
        $k += 1;
    }
}

function RecursiveMergeSortSplit(&$arr, &$tempArr, $leftIndex, $rightIndex) {
    if($rightIndex - $leftIndex <= 1) {
        return;
    }
    $middleIndex = floor(($leftIndex + $rightIndex) / 2);
    RecursiveMergeSortSplit($arr, $tempArr, $leftIndex, $middleIndex);
    RecursiveMergeSortSplit($arr, $tempArr, $middleIndex, $rightIndex);
    for ($i = $leftIndex; $i < $rightIndex; $i += 1) {
        $tempArr[$i] = $arr[$i];
    }
    RecursiveMergeArr($arr, $tempArr, $leftIndex, $middleIndex, $rightIndex);
}

function RecursiveMergeSort(&$arr) {
    $arrLength = count($arr);
    $tempArr = [];
    foreach($arr as $val) {
        array_push($tempArr, $val);
    }
    RecursiveMergeSortSplit($arr, $tempArr, 0, $arrLength);
}